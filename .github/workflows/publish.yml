name: Publish to PyPI

on:
  # Trigger on tag creation (recommended)
  push:
    tags:
      - 'v*'
  # Also allow manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (optional - will auto-detect if empty)'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write  # Required for trusted publishing
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Extract version
      id: extract_version
      run: |
        if [ "${{ github.event_name }}" = "push" ] && [ -n "${{ github.ref_name }}" ]; then
          # Extract from tag (remove 'v' prefix)
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
        elif [ -n "${{ inputs.version }}" ]; then
          # Use manual input
          VERSION="${{ inputs.version }}"
        else
          # Extract from __init__.py
          VERSION=$(grep -oP '__version__:\s*str\s*=\s*"\K[^"]+' extended_sklearn_metrics/__init__.py)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Publishing version: $VERSION"

    - name: Verify version consistency
      run: |
        INIT_VERSION=$(grep -oP '__version__:\s*str\s*=\s*"\K[^"]+' extended_sklearn_metrics/__init__.py)
        SETUP_VERSION=$(grep -oP 'version\s*=\s*"\K[^"]+' setup.py)
        PYPROJECT_VERSION=$(grep -oP 'version\s*=\s*"\K[^"]+' pyproject.toml)
        
        echo "Versions found:"
        echo "  __init__.py: $INIT_VERSION"
        echo "  setup.py: $SETUP_VERSION" 
        echo "  pyproject.toml: $PYPROJECT_VERSION"
        echo "  Target: ${{ steps.extract_version.outputs.version }}"
        
        if [ "$INIT_VERSION" != "${{ steps.extract_version.outputs.version }}" ] || \
           [ "$SETUP_VERSION" != "${{ steps.extract_version.outputs.version }}" ] || \
           [ "$PYPROJECT_VERSION" != "${{ steps.extract_version.outputs.version }}" ]; then
          echo "‚ùå Version mismatch detected!"
          exit 1
        fi
        echo "‚úÖ All versions match"

    - name: Check if version exists on PyPI
      id: check_version
      run: |
        echo "Checking if version ${{ steps.extract_version.outputs.version }} exists on PyPI..."
        
        if pip index versions extended-sklearn-metrics 2>/dev/null | grep -q "Available versions.*${{ steps.extract_version.outputs.version }}"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "‚ùå Version ${{ steps.extract_version.outputs.version }} already exists on PyPI"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Version ${{ steps.extract_version.outputs.version }} is new"
        fi

    - name: Clean old builds
      if: steps.check_version.outputs.exists == 'false'
      run: |
        rm -rf dist/ build/ *.egg-info/
        echo "‚úÖ Cleaned old build artifacts"

    - name: Build package
      if: steps.check_version.outputs.exists == 'false'
      run: |
        python -m build
        echo "‚úÖ Package built successfully"

    - name: Verify build artifacts
      if: steps.check_version.outputs.exists == 'false'
      run: |
        echo "üì¶ Distribution files:"
        ls -la dist/
        echo "üîç Checking package integrity..."
        twine check dist/*

    - name: Publish to PyPI
      if: steps.check_version.outputs.exists == 'false'
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "üöÄ Publishing to PyPI..."
        twine upload dist/* --verbose --non-interactive

    - name: Verify successful publication
      if: steps.check_version.outputs.exists == 'false'
      run: |
        echo "‚úÖ Waiting for PyPI to update..."
        sleep 30
        
        # Verify the package is available
        MAX_ATTEMPTS=10
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          if pip index versions extended-sklearn-metrics 2>/dev/null | grep -q "${{ steps.extract_version.outputs.version }}"; then
            echo "‚úÖ Version ${{ steps.extract_version.outputs.version }} successfully published to PyPI!"
            break
          else
            echo "‚è≥ Attempt $ATTEMPT/$MAX_ATTEMPTS: Version not yet available, waiting..."
            sleep 10
            ATTEMPT=$((ATTEMPT + 1))
          fi
        done
        
        if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
          echo "‚ö†Ô∏è  Could not verify publication, but upload appeared successful"
        fi

    - name: Create GitHub Release
      if: steps.check_version.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.extract_version.outputs.version }}
        name: Release v${{ steps.extract_version.outputs.version }}
        body: |
          ## Release v${{ steps.extract_version.outputs.version }}
          
          This release has been automatically published to PyPI.
          
          Install with: `pip install extended-sklearn-metrics==${{ steps.extract_version.outputs.version }}`
          
          ### Changes
          See [CHANGELOG](https://github.com/SubaashNair/extended-sklearn-metrics/blob/main/README.md#version-history) for details.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      if: always()
      run: |
        if [ "${{ steps.check_version.outputs.exists }}" = "true" ]; then
          echo "üì¶ Version ${{ steps.extract_version.outputs.version }} already exists - skipped publishing"
        elif [ "${{ job.status }}" = "success" ]; then
          echo "üéâ Successfully published version ${{ steps.extract_version.outputs.version }} to PyPI!"
        else
          echo "‚ùå Publishing failed"
        fi