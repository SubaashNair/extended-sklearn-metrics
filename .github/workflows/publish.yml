name: Publish to PyPI

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for tagging
      id-token: write  # Required for trusted publishing
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for version comparison
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version
      id: extract_version
      run: |
        VERSION=$(python -c "from setuptools import setup; setup()" --version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Check if version exists on PyPI
      id: check_version
      run: |
        # Try to fetch the current version from PyPI
        if pip index versions extended-sklearn-metrics 2>/dev/null | grep -q "${{ steps.extract_version.outputs.version }}"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Version ${{ steps.extract_version.outputs.version }} already exists on PyPI. Skipping upload."
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Version ${{ steps.extract_version.outputs.version }} doesn't exist on PyPI. Proceeding with upload."
        fi
    
    - name: Clean old builds
      if: steps.check_version.outputs.exists == 'false'
      run: |
        rm -rf dist/
        rm -rf build/
        rm -rf *.egg-info/
    
    - name: Build package
      if: steps.check_version.outputs.exists == 'false'
      run: python -m build
    
    - name: List distribution files
      if: steps.check_version.outputs.exists == 'false'
      run: ls -l dist/
    
    - name: Publish to PyPI
      if: steps.check_version.outputs.exists == 'false'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_PASSWORD }}
      
    - name: Create tag for new version
      if: steps.check_version.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a v${{ steps.extract_version.outputs.version }} -m "Release v${{ steps.extract_version.outputs.version }}"
        git push origin v${{ steps.extract_version.outputs.version }}